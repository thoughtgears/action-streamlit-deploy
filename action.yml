name: Streamlit Deploy
description: Deploy streamlit to Cloud Run
inputs:
  region:
    description: GCP Region to deploy to
    default: europe-west1
  project:
    description: GCP Project to deploy to
    required: true
  docker_repository:
    description: The name of the Docker repository to store the image
    required: true

  streamlit_name:
    description: The name of the streamlit app
    required: true
  streamlit_path:
    description: The path to the streamlit code and Dockerfile
    required: true
  public:
    description: Whether the app should be public or not
    default: "false"

  github_token:
    description: GitHub token to use in the action for different steps
    required: true
  access_token:
    description: Access token to use for Docker login
    required: true

  gcs_state_bucket:
    description: The name of the GCS bucket to store the Terraform state
    required: true

outputs:
  streamlit_url:
    description: The URL of the deployed Cloud Run streamlit app
    value: ${{ steps.deploy.outputs.streamlit_url }}

runs:
  using: composite

  steps:
    - name: Set variables
      id: set-vars
      shell: bash
      run: |
        echo "DOCKER_REPO=$(echo ${{ inputs.docker_repository }} | cut -d'/' -f1)" >> $GITHUB_ENV

    - name: Docker Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.docker_repository }}/${{ inputs.streamlit_name }}
        tags: |
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Docker Login (Google)
      uses: docker/login-action@v3
      id: login-gar
      with:
        registry: ${{ env.DOCKER_REPO }}
        username: oauth2accesstoken
        password: ${{ inputs.access_token }}

    - name: Build and push
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.streamlit_path }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Setup Terraform
      id: setup-terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.5

    - name: Create Terraform backend config
      shell: bash
      run: |
        mkdir -p terraform
        cat <<EOF > backend.tf
        terraform {
          backend "gcs" {
            bucket = "${{ inputs.gcs_state_bucket }}"
            prefix = "${{ inputs.streamlit_name }}"
          }
        }
        EOF

    - name: Create tfvars
      id: create-tfvars
      shell: bash
      run: |
        cat <<EOF > terraform.auto.tfvars
        region = "${{ inputs.region }}"
        project_id = "${{ inputs.project }}"
        streamlit_name = "${{ inputs.streamlit_name }}"
        docker_image = "${{ inputs.docker_repository }}/${{ inputs.streamlit_name }}"
        docker_digest = "${{ steps.build.outputs.digest }}"
        public = ${{ inputs.public }}
        EOF

    - name: Terraform Run
      id: terraform-run
      shell: bash
      run: |
        terraform init
        terraform validate
        terraform plan -out=tf.plan
        terraform apply tf.plan
        terraform output -json > outputs.json

    - name: Get Terraform Outputs
      id: terraform-outputs
      shell: bash
      run: |
        streamlit_url=$(jq -r .streamlit_url.value outputs.json)
        echo "streamlit_url=$streamlit_url" >> $GITHUB_OUTPUT
