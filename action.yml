name: Streamlit Deploy
description: Deploy streamlit to Cloud Run
inputs:
  terraform_version:
    description: The version of Terraform to use
    default: 1.8.5
  terraform_directory:
    description: The directory containing the Terraform configuration
    default: terraform
  region:
    description: GCP Region to deploy to
    default: europe-west1
  project:
    description: GCP Project to deploy to
    required: true
  github_token:
    description: Token to use for downloading and uploading the Terraform state
    required: true

outputs:
  cloud_run_url:
    description: The URL of the deployed Cloud Run streamlit app
    value: ${{ steps.random-number-generator.outputs.random-number }}

runs:
  using: composite

  steps:
    - name: Setup Terraform
      id: setup-terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - run: pip install python-gnupg requests
      id: install-requirements
      shell: bash

    - name: Generate Configuration
      id: generate-config
      run: |
        touch run.auto.tfvars
        echo "region     = ${{ inputs.region }}" >> run.auto.tfvars
        echo "project_id = ${{ inputs.project }}" >> run.auto.tfvars
      shell: bash

    - name: Download Terraform State Artifact
      id: download-artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform.tfstate
        path: ${{ inputs.terraform_directory }}/terraform.tfstate
        github_token: ${{ inputs.github_token }}

    - name: Terraform Init
      id: terraform-init
      shell: bash
      run: terraform init
      working-directory: ${{ inputs.terraform_directory }}

    - name: Terraform Plan
      id: terraform-plan
      shell: bash
      run: terraform plan -out=tf.plan
      working-directory: ${{ inputs.terraform_directory }}

    - name: Terraform Apply
      id: terraform-apply
      shell: bash
      run: terraform apply tf.plan
      working-directory: ${{ inputs.terraform_directory }}

    - name: Upload Terraform State Artifact
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform.tfstate
        path: ${{ inputs.terraform_directory }}/terraform.tfstate
        github_token: ${{ inputs.github_token }}
