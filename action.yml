name: Streamlit Deploy
description: Deploy streamlit to Cloud Run
inputs:
  region:
    description: GCP Region to deploy to
    default: europe-west1
  project:
    description: GCP Project to deploy to
    required: true
  github_token:
    description: GitHub token to use in the action for different steps
    required: true
  streamlit_name:
    description: The name of the streamlit app
    required: true
  gcs_state_bucket:
    description: The name of the GCS bucket to store the Terraform state
    default: ""

outputs:
  streamlit_url:
    description: The URL of the deployed Cloud Run streamlit app
    value: not-set
  streamlit_service_account:
    description: The service account used by the streamlit app
    value: ${{ steps.deploy.outputs.streamlit_service_account }}

runs:
  using: composite

  steps:
    - name: Setup Terraform
      id: setup-terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.5

    - name: Create Terraform backend config
      if: ${{ inputs.gcs_state_bucket != '' }}
      shell: bash
      run: |
        mkdir -p terraform
        cat <<EOF > backend.tf
        terraform {
          backend "gcs" {
            bucket = "${{ inputs.gcs_state_bucket }}"
            prefix = "${{ inputs.streamlit_name }}"
          }
        }
        EOF

    - name: Terraform Run
      id: terraform-run
      shell: bash
      run: |
        terraform init
        terraform validate
        terraform plan -out=tf.plan \
          --var region=${{ inputs.region }} \
          --var project_id=${{ inputs.project }} \
          --var streamlit_name=${{ inputs.streamlit_name }}
        terraform apply tf.plan
        terraform output -json > outputs.json

    - name: Get Terraform Outputs
      id: terraform-outputs
      shell: bash
      run: |
        cat outputs.json
        streamlit_service_account=$(jq -r .streamlit_service_account.value outputs.json)
        echo "::set-output name=streamlit_service_account::$streamlit_service_account"
